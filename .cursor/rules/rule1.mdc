---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
# 开发须知


## 项目简介
一款为 uTools 平台开发的插件，旨在提供高度可定制的人工智能聊天体验。该插件支持连接各种兼容 OpenAI API 格式的模型服务，让用户能够方便地进行多轮对话，同时保存聊天历史记录。
核心功能
多模型支持：支持添加并切换多个不同的 AI 模型配置，兼容 OpenAI API 格式
系统提示词设定：可为每个模型自定义系统提示词，优化 AI 回复质量
历史记录存储：本地保存所有聊天记录，方便随时查看和继续之前的对话
流式响应：支持 AI 回复的实时流式显示，提升用户体验
Markdown 渲染：AI 回复支持 Markdown 格式，包括代码高亮显示
文本工具：内置 AI 翻译和 AI 解释功能，可通过选中文本快速调用

## uTools 插件的运行原理和结构

### 插件基本结构

uTools 插件是基于 Electron 框架的应用集成，主要包含以下核心组件：

1. **plugin.json** - 插件的配置文件，定义插件的基本信息和功能入口
2. **index.html** - 插件的主界面，负责 UI 渲染
3. **preload.js** - 预加载脚本，提供 Node.js 和 Electron API 调用能力  
4. **logo.png** - 插件图标

### 运行原理

uTools 插件的运行原理基于以下几个关键点：

#### 1. 基于 Electron 的渲染机制

uTools 本身是基于 Electron 框架构建的，每个插件都运行在 Electron 的渲染进程中。插件通过 Web 技术（HTML/CSS/JavaScript）构建界面，同时可以通过 preload.js 访问 Node.js 和 Electron 的 API。

#### 2. 插件生命周期

- **加载时**：uTools 读取 plugin.json 配置，加载插件资源
- **激活时**：当用户通过指令或快捷方式调用插件时，uTools 加载 main 指定的入口文件（通常是 index.html）
- **运行中**：插件可以通过 preload.js 访问 uTools API 和 Node.js 功能
- **退出时**：插件可以通过事件监听退出行为，做相应处理

#### 3. 功能指令系统

uTools 的插件通过 plugin.json 中的 features 配置指令，用户可以通过这些指令快速唤起插件的不同功能：

- 普通指令：用户输入特定关键词触发
- 文本匹配指令：用户选中特定文本后触发（type: "over"）
- 正则匹配指令：匹配特定格式的文本后触发

#### 4. 数据存储系统

uTools 为插件提供了本地数据库功能，支持离线存储和云同步：
- dbStorage：类似 localStorage 的键值对存储
- 本地数据库：支持更复杂的数据结构和查询

#### 5. 项目结构
- index.html
- plugin.json plugin.json 文件是插件应用的配置文件，它是最重要的一个文件，用来定义这个插件应用将如何与 uTools 集成。 每当你创建一个插件应用时，都需要从创建一个 plugin.json 文件开始。
- preload.js 当你在 plugin.json 文件配置了 preload 字段，指定的 js 文件将被预加载，该 js 文件可以调用 Node.js API 的本地原生能力和 Electron 渲染进程 API。

为什么需要 preload
在传统的 web 开发中，为了保持用户运行环境的安全，JavaScript 被做了很强的沙箱限制，比如不能访问本地文件，不能访问跨域网络资源，不能访问本地存储等。

uTools 基于 Electron 构建，通过 preload 机制，在渲染线程中，释放了沙箱限制，使得用户可以通过调用 Node.js 的 API 来访问本地文件、跨域网络资源、本地存储等。

preload 的定义
preload 是完全独立于前端项目的一个特殊文件，它应当与 plugin.json 位于同一目录或其子目录下，保证可以在打包插件应用时可以被一起打包。

preload js 文件遵循 CommonJS 规范，因此你可以使用 require 来引入 Node.js 模块，此部分可以参考 Node.js 文档。

### 插件能力与 API

1. **系统集成能力**
   - 窗口管理：控制 uTools 窗口
   - 复制粘贴：操作系统剪贴板
   - 文件操作：访问和操作本地文件
   - 屏幕操作：截图、取色等

2. **自动化能力**
   - ubrowser：可编程的自动化浏览器
   - 模拟按键：模拟键盘和鼠标操作

3. **AI 能力**
   - 支持调用 AI 模型，包括 Function Calling 功能

4. **用户交互**
   - 动态指令：根据用户行为动态调整插件功能
   - 通知系统：向用户推送消息
   - 事件系统：响应用户操作

### 插件开发流程

1. 创建插件配置（plugin.json）
2. 构建界面（index.html）
3. 编写预加载脚本（preload.js）实现核心功能
4. 使用 uTools 开发者工具进行测试和调试
5. 打包发布到插件市场

通过这种结构，uTools 实现了轻量级但功能丰富的插件系统，让开发者能够快速开发和集成各种实用工具。


更多要求：不要使用alert来提醒，而是使用现代浮动的提示，这个在项目中已经实现过一个。
